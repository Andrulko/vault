<?php

namespace App\Repository;

use App\Entity\Beneficiaire;
use App\Entity\Contact;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;

/**
 * ContactRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Contact::class);
    }

    private function findByBeneficiaryQueryBuilder(Beneficiaire $beneficiary): QueryBuilder
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.beneficiaire = :beneficiary')
            ->setParameter('beneficiary', $beneficiary)
            ->orderBy('c.createdAt', 'DESC');
    }

    private function searchByBeneficiaryQueryBuilder(Beneficiaire $beneficiary, ?string $word): QueryBuilder
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.beneficiaire = :beneficiary')
            ->andWhere('c.nom LIKE :word OR c.prenom LIKE :word OR c.telephone LIKE :word or c.email LIKE :word')
            ->orderBy('c.createdAt', 'DESC')
            ->setParameters([
                'beneficiary' => $beneficiary,
                'word' => sprintf('%%%s%%', $word),
            ]);
    }

    /**
     * @return Contact[]
     */
    public function findAllByBeneficiary(Beneficiaire $beneficiary): array
    {
        return $this->findByBeneficiaryQueryBuilder($beneficiary)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Contact[]
     */
    public function findSharedByBeneficiary(Beneficiaire $beneficiary): array
    {
        return $this->findByBeneficiaryQueryBuilder($beneficiary)
            ->andWhere('c.bPrive = FALSE')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Contact[]
     */
    public function searchByBeneficiary(Beneficiaire $beneficiary, ?string $word): array
    {
        return $this->searchByBeneficiaryQueryBuilder($beneficiary, $word)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return Contact[]
     */
    public function searchSharedByBeneficiary(Beneficiaire $beneficiary, ?string $word): array
    {
        return $this->searchByBeneficiaryQueryBuilder($beneficiary, $word)
            ->andWhere('c.bPrive = FALSE')
            ->getQuery()
            ->getResult();
    }
}
